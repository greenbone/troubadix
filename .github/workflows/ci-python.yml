name: Build and test Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linting:
    name: Linting
    runs-on: 'ubuntu-latest'
    strategy:
        matrix:
          python-version:
            - 3.7
            - 3.8
            - 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Install and check with black, pylint and pontos.version
        uses: greenbone/actions/lint-python@v1
        with:
          packages: troubadix tests
          version: ${{ matrix.python-version }}

  test:
    name: Run all tests
    runs-on: 'ubuntu-latest'
    strategy:
        matrix:
          python-version:
            - 3.7
            - 3.8
            - 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Install python, poetry and dependencies
        uses: greenbone/actions/poetry@v1
        with:
          version: ${{ matrix.python-version }}
      - name: Run unit tests
        run: |
          # download image before running tests
          docker pull greenbone/ospd-openvas:stable
          poetry run python -m unittest -v
        env:
          NASLINTER_DOCKER_RUN: "true"

  codecov:
    name: Upload coverage to codecov.io
    needs: test
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Install python, poetry and dependencies
        uses: greenbone/actions/poetry@v1
        with:
          version: 3.8
      - name: Install codecov-python
        run: poetry run python -m pip install codecov
      - name: Download openvas!
        run: |
          docker pull greenbone/ospd-openvas:stable
      - name: Run unit tests
        run: |
          # download image before running tests
          docker pull greenbone/ospd-openvas:stable
          poetry run coverage run -m unittest -v
        env:
          NASLINTER_DOCKER_RUN: "true"
      - name: Create coverage XML report
        run:  poetry run coverage xml
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{ inputs.token }}
          fail_ci_if_error: true
